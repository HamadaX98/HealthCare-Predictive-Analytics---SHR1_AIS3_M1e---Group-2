# -*- coding: utf-8 -*-
"""Copy of DEPI Grad_Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JysY8AHJPhsG2y-V4aRda6hmCa48jg8s

# **HealthCare Predictive Analytics**

# **Cover**

## **Track:** AI & Data Science
## **Group Code:** SHR1_AIS3_M1e
## **Group Members & Assigned Tasks:**
*   **Ahmed Magdy Ahmed (Leader)** - *Data Collection & MlFlow*
*   **Khaled Tarek Mohamed** - *Data Exploration, Analysis & Visualization*
*   **Modather Abdelmohsen Abdelmawgood** - *Data Prediction*

# **Notebook Setup**
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
prasad22_healthcare_dataset_path = kagglehub.dataset_download('prasad22/healthcare-dataset')

print('Data source import complete.')

# Commented out IPython magic to ensure Python compatibility.
# Main Required Libraries
import numpy as np
import pandas as pd
import seaborn as sns
import scipy.stats as stats
import plotly.express as px
import matplotlib.pyplot as plt

# Plots Adjustment
# %matplotlib inline

# Handling Compiler Warnings
import warnings as ws
ws.filterwarnings('ignore')

# Code Insurance
print("Setup Complete")

"""# **Data Collection & Exploration**

## Data Collection
"""

# Setting Data Path
healthcare = "/content/healthcare_dataset.csv"

# Loading Data
df = pd.read_csv(healthcare)

# Code Insurance
print("Collection Complete!")

"""## Data Exploration"""

# Display First 5 Rows
df.head()

# Display Data Information
df.info()

# Display Data Shape (Rows x Columns)
df.shape

# Display Data Description
df.describe()

# Display Number of Distinct Element of All DataFrames
df.nunique()

"""# **Data Cleaning, Analysis & Visualization**

## Data Cleaning

### Handling Duplicates
"""

# Check For Data Duplicates
df.duplicated().sum()

# Duplicates Handling
df.drop_duplicates(inplace = True)

# Checking For Data Duplicates After Handling
df.duplicated().sum()

"""### Handling Missing Values"""

# Check For Missing Values
df.isnull().sum()

"""## Data Analysis"""

# Gender Analysis
df.Gender.value_counts()

# Billing Amount Analysis
df['Billing Amount'].describe()

# Blood Type Analysis
df['Blood Type'].value_counts()

# Medical Condition Analysis
df['Medical Condition'].value_counts()

# Medication Analysis
df.Medication.value_counts()

# Doctors Analysis
df.Doctor.value_counts()

# Hospital Analysis
df.Hospital.value_counts()

# Insurance Provoder Analysis
# Number Of Patients & Billing Amount Provider By Each Provider

# Aggregation & Grouping
provider = df.groupby(by = 'Insurance Provider').agg(
    {'Billing Amount': 'sum','Insurance Provider':'size'})

# Transformation
provider.columns = ['Billing Amount', 'Patients']
provider['Billing Amount']=np.around(provider['Billing Amount'])

# Sorting
provider = pd.DataFrame(provider.sort_values(by='Patients')).reset_index()

# Displaying
provider

"""## Data Visualization"""

# Billing Amount Distribution To Check For Outliers

plt.figure(figsize =(4, 4))
sns.set_style('white')
sns.boxplot(df['Billing Amount'], color = 'salmon')
plt.title('Billing Amount Distribution')
plt.show()

# DataFrames Distribution

categ = ["Gender", "Blood Type", "Medical Condition", "Insurance Provider",
         "Admission Type", "Medication", "Test Results"]
for i, col in enumerate(categ, 1):
    fig = px.sunburst(df, path = [col])
    fig.update_traces(textinfo = "label + percent parent")
    fig.update_layout(title_text = f"Patient's {col}",
                     titlefont = {'size' : 20, 'family' : 'Serif'},
                     width = 600, height = 600)
    fig.show()

# Test Results Destribution According To Medication

fig = px.sunburst(df, path = ["Test Results", "Medication"])
fig.update_traces(textinfo = "label + percent parent")
fig.update_layout(title_text = "Test Results by Medication",
                 titlefont = {'size' : 20, 'family' : 'Serif'},
                 width = 600, height = 600)
fig.show()

# Admission Type Distribution Accordng To Medical Condition

fig = px.sunburst(df, path = ["Admission Type", "Medical Condition"])
fig.update_traces(textinfo = "label + percent parent")
fig.update_layout(title_text = "Admission Type by Medical Condition",
                 titlefont = {'size' : 20, 'family' : 'Serif'},
                 height = 600, width = 600)

# Patients Overall Satatus Distribution

fig = px.sunburst(df, path = ["Gender", "Medical Condition", "Medication"])
fig.update_traces(textinfo = "label + percent parent")
fig.update_layout(title_text = "Patient's Status",
                 titlefont = {'size' : 20, 'family' : 'Serif'},
                 height = 600, width = 600)
fig.show()

# Age Average Distribution

plt.figure(figsize=(10,6),dpi=200)
sns.set_style('dark')
sns.histplot(df['Age'],color='blue',kde=True)
plt.axvline(np.mean(df['Age']),ls='--',lw=2,label=f"Average Age: {np.mean(df['Age']):.2f}")
plt.title('Age Distribution',fontsize=24)
plt.xlabel('Age',fontsize=20)
plt.ylabel('Frequency',fontsize=20)
plt.legend(fontsize=16)
plt.tight_layout()
plt.show()

"""# **Predective Model Development**

## Model Selection
"""

# Relocate "Test Results" To Be The Last Column

df1 = df.copy()
df.drop("Test Results", axis = 1, inplace = True)
df = pd.concat([df, df1["Test Results"]], axis = 1)

print("Relocation Complete!")

# Label Enocder (To Change String Values To Numerial Values)

# Library
from sklearn.preprocessing import LabelEncoder

# Precessing
le = LabelEncoder()
cat_cols = []
for col in df.columns:
    if df[col].dtypes == "object":
        cat_cols.append(col)
for col in cat_cols:
    df[col] = le.fit_transform(df[col])

print("Encoding Complete!")

# Display Data After Encoding
df.head()

# Categories Selection (All Exept Test Results)
X = df.drop(['Name','Test Results'],axis = 1)

# Target Selection (Test Results)
y = df['Test Results']

print("Selection Complete!")

"""## Model Training"""

# Importing Model Training Library
from sklearn.model_selection import train_test_split

# Model Splitting
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 2000,
                                         shuffle = True, random_state = 42)

print("Training Complete!")

"""## Model Prediction & Results"""

# Prediction Setup
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score

print("Setup Complete!")

# Prediction Using Decision Tree Classifier

# Model Specificaton
dtc = DecisionTreeClassifier()

# Model Fitting
dtc.fit(X_train, y_train)

# Model Prediction
dtc_pred = dtc.predict(X_test)

# Model Accuracy
tree_Acc = accuracy_score(y_test, dtc_pred)
print(f'Accuracy: {tree_Acc * 100:.2f}%')

# Model Precision
tree_precision = precision_score(y_test, dtc_pred, average = 'weighted')
print('\nPrecision Score:', tree_precision)

# Model Recall
tree_recall = recall_score(y_test, dtc_pred, average = 'weighted')
print('\nRecall Score:', tree_recall)

# Model F1 Score
tree_f1 = f1_score(y_test, dtc_pred, average = 'weighted')
print('\nF1 Score:', tree_f1)

# Prediction Using Random Forest Regressor

# Model Specificaton
rfc = RandomForestClassifier()

# Model Fitting
rfc.fit(X_train, y_train)

# Model Prediction
rfc_pred = rfc.predict(X_test)

# Model Accuracy
forest_Acc = accuracy_score(y_test, rfc_pred)
print(f'Accuracy: {forest_Acc * 100:.2f}%')

# Model Precision
forest_precision = precision_score(y_test, rfc_pred, average = 'weighted')
print('\nPrecision Score:', forest_precision)

# Model Recall
forest_recall = recall_score(y_test, rfc_pred, average = 'weighted')
print('\nRecall Score:', forest_recall)

# Model F1 Score
forest_f1 = f1_score(y_test, rfc_pred, average = 'weighted')
print('\nF1 Score:', forest_f1)

"""# **MLFlow**

## Installations
"""

!pip install pyngrok
!pip install  mlflow

"""##  Server Setup"""

import subprocess
import mlflow
import pyngrok
from pyngrok import ngrok, conf

MLFLOW_TRACKING_URI = "sqlite:///mlflow.db"
subprocess.Popen(["mlflow", "ui", "--backend-store-uri", MLFLOW_TRACKING_URI])

"""## Experiment Setup"""

mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)
mlflow.set_experiment("HealthCare Prediction")

import getpass

print("Enter your authtoken, which can be copied from https://dashboard.ngrok.com/signup")
conf.get_default().auth_token = getpass.getpass()
port = 5000
public_url = ngrok.connect(port).public_url
print(f' * ngrok tunnel \"{public_url}\" -> \"http://127.0.0.1:{port}\"')
input("Resume. ?  : ")

"""## DTC Tracking"""

from mlflow.models import infer_signature

# Start an MLflow run
with mlflow.start_run():

    # Log the loss metric
    mlflow.log_metric("Accuracy", tree_Acc)
    mlflow.log_metric("Precision", tree_precision)
    mlflow.log_metric("Recall", tree_recall)
    mlflow.log_metric("F1", tree_f1)

    # Set a tag that we can use to remind ourselves what this run was for
    mlflow.set_tag("Training Info", "Basic DTC Model For HealthCare Data")

    # Infer the model signature
    signature = infer_signature(X_train, dtc_pred)

    # Log the model
    model_info = mlflow.sklearn.log_model(
        sk_model = rfc,
        artifact_path = "DTC_Model",
        signature = signature,
        input_example = X_train,
        registered_model_name = "Tracking-DTC",
    )

"""## RFC Tracking"""

# Start an MLflow run
with mlflow.start_run():

    # Log the loss metric
    mlflow.log_metric("Accuracy", forest_Acc)
    mlflow.log_metric("Precision", forest_precision)
    mlflow.log_metric("Recall", forest_recall)
    mlflow.log_metric("F1", forest_f1)

    # Set a tag that we can use to remind ourselves what this run was for
    mlflow.set_tag("Training Info", "Basic RFC Model For HealthCare Data")

    # Infer the model signature
    signature = infer_signature(X_train, rfc_pred)

    # Log the model
    model_info = mlflow.sklearn.log_model(
        sk_model = rfc,
        artifact_path = "RFC_Model",
        signature = signature,
        input_example = X_train,
        registered_model_name = "Tracking-RFC",
    )